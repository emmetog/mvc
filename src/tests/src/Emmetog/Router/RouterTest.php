<?php

namespace Emmetog\Router;

require_once dirname(dirname(dirname(dirname(__FILE__)))) . '/init_test.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-28 at 20:33:05.
 */
class RouterTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Router
     */
    protected $object;
    
    
    /**
     * The config object.
     * 
     * @var Emmetog\Config\Config
     */
    protected $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->config = new \Emmetog\Config\ConfigForMocking(APP_ROOT_DIRECTORY.'config/', new \Emmetog\Cache\NullCache());
        $this->object = new Router($this->config);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    
    /**
     * @covers Emmetog\Router\Router::match
     */
    public function testMatchReturnsRouteObject()
    {
        // First we set up the Router with the maps.
        $this->object->setMap(array('home/index' => 'example.com/test'));

        // Now check if the match() method works.
        $result = $this->object->match('example.com/test');

        $this->assertInstanceOf('\Emmetog\Router\Route', $result);
    }

    /**
     * @covers Emmetog\Router\Router::map
     * @covers Emmetog\Router\Router::match
     * 
     * @dataProvider simpleUrlsMapAndMatchProvider
     */
    public function testSimpleUrlsMapAndMatch($map, $url, $expectedController)
    {
        // First we set up the Router with the maps.
        $this->object->setMap($map);

        // Now check if the match() method works.
        $result = $this->object->match($url);

        $this->assertEquals($expectedController, $result->getController());
    }

    public function simpleUrlsMapAndMatchProvider()
    {
        return array(
            'simple url 1' => array(
                'map' => array('home/index' => 'example.com/test'),
                'url' => 'example.com/test',
                'expectedController' => 'home/index',
            ),
            'simple url 2' => array(
                'map' => array('admin/backend' => 'example.com/admin/backend'),
                'url' => 'example.com/admin/backend',
                'expectedController' => 'admin/backend',
            ),
            'simple url 3' => array(
                'map' => array('search/list' => 'example.com/search/page'),
                'url' => 'example.com/search/page',
                'expectedController' => 'search/list',
            ),
            'simple map with 2 urls' => array(
                'map' => array(
                    'search/list' => 'example.com/search/page',
                    'admin/backend' => 'example.com/admin/backend',
                ),
                'url' => 'example.com/admin/backend',
                'expectedController' => 'admin/backend',
            ),
            'simple map with 3 urls' => array(
                'map' => array(
                    'search/list' => 'example.com/search/page',
                    'admin/backend' => 'example.com/admin/backend',
                    'home/index' => 'example.com/test',
                ),
                'url' => 'example.com/admin/backend',
                'expectedController' => 'admin/backend',
            ),
            'simple map with a preg_match' => array(
                'map' => array(
                    'search/list' => 'example.com/search/page',
                    'admin/backend' => 'example.com/admin/backend',
                    'home/index' => 'example.com/test',
                ),
                'url' => 'example.com/admin/backend',
                'expectedController' => 'admin/backend',
            ),
        );
    }

    /**
     * @covers Emmetog\Router\Router::map
     * @covers Emmetog\Router\Router::match
     * 
     * @dataProvider placeholderUrlsMapAndMatchProvider
     */
    public function testPlaceholderUrlsMapAndMatch($map, $placeholders, $url, $expectedController)
    {
        // First we set up the Router with the maps.
        $this->object->setMap($map);
        $this->object->setPlaceholders($placeholders);

        // Now check if the match() method works.
        $result = $this->object->match($url);
        
         $this->assertInstanceOf('\Emmetog\Router\Route', $result);

        $this->assertEquals($expectedController, $result->getController());
    }

    public function placeholderUrlsMapAndMatchProvider()
    {
        return array(
            'one simple placeholder' => array(
                'map' => array('home/index' => '<domain>/test'),
                'placeholders' => array('domain' => 'example.com'),
                'url' => 'example.com/test',
                'expectedController' => 'home/index',
            ),
        );
    }

}
