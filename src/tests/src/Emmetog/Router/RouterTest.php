<?php

namespace Emmetog\Router;

use Emmetog\Config\Config;
use Emmetog\Config\ConfigForMocking;
use Emmetog\Cache\NullCache;

require_once dirname(dirname(dirname(dirname(__FILE__)))) . '/init_test.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-28 at 20:33:05.
 */
class RouterTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Router
     */
    protected $object;

    /**
     * The config object.
     * 
     * @var ConfigForMocking
     */
    protected $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->config = new ConfigForMocking(APP_ROOT_DIRECTORY . 'config/', new NullCache());
        $this->object = new Router();
		$this->object->setConfig( $this->config );
		$this->config->setUnmockedClassesAllowed( true );
    }

    /**
     * @covers Emmetog\Router\Router::match
     */
    public function testMatchReturnsRouteObject()
    {
        // First we set up the Router with the maps.
        $this->object->setMap(array('home/index' => 'example.com/test'));

        // Now check if the match() method works.
        $result = $this->object->match('example.com/test');

        $this->assertInstanceOf('\Emmetog\Router\Route', $result);
    }
    
    public function simpleUrlsProvider()
    {
        return array(
            'simple url 1' => array(
                'map' => array('home/index' => 'example.com/test'),
                'url' => 'example.com/test',
                'expectedController' => 'home/index',
            ),
            'simple url 2' => array(
                'map' => array('admin/backend' => 'example.com/admin/backend'),
                'url' => 'example.com/admin/backend',
                'expectedController' => 'admin/backend',
            ),
            'simple url 3' => array(
                'map' => array('search/list' => 'example.com/search/page'),
                'url' => 'example.com/search/page',
                'expectedController' => 'search/list',
            ),
            'simple map with 2 urls' => array(
                'map' => array(
                    'search/list' => 'example.com/search/page',
                    'admin/backend' => 'example.com/admin/backend',
                ),
                'url' => 'example.com/admin/backend',
                'expectedController' => 'admin/backend',
            ),
            'simple map with 3 urls' => array(
                'map' => array(
                    'search/list' => 'example.com/search/page',
                    'admin/backend' => 'example.com/admin/backend',
                    'home/index' => 'example.com/test',
                ),
                'url' => 'example.com/admin/backend',
                'expectedController' => 'admin/backend',
            ),
			'simple map with a preg_match' => array(
				'map' => array(
					'search/list' => 'example.com/search/page',
					'admin/backend' => 'example.com/admin/backend',
					'home/index' => 'example.com/test',
				),
				'url' => 'example.com/admin/backend',
				'expectedController' => 'admin/backend',
			)
        );
    }

	/**
	 * @covers Emmetog\Router\Router::map
	 * @covers Emmetog\Router\Router::match
	 *
	 * @dataProvider simpleUrlsProvider
	 */
	public function testSimpleUrlsMapAndMatch($map, $url, $expectedController)
	{
		// First we set up the Router with the maps.
		$this->object->setMap($map);

		// Now check if the match() method works.
		$result = $this->object->match($url);

		$this->assertEquals($expectedController, $result->getController());
	}

	/**
	 * @covers Emmetog\Router\Router::map
	 * @covers Emmetog\Router\Router::match
	 *
	 * @dataProvider simpleUrlsProvider
	 */
	public function testPatternMatchesExactly()
	{
		$this->setExpectedException( 'Emmetog\Router\RouterUrlNotMatchedException' );

		$map = array(
			'search/list' => 'example.com/search/page',
			'admin/backend' => 'example.com',
		);

		$url_under_test = 'example.com/test';

		// First we set up the Router with the maps.
		$this->object->setMap($map);

		// Now check if the match() method works.
		$this->object->match($url_under_test);
	}
    
    public function placeholderUrlsProvider()
    {
        return array(
            'one simple placeholder' => array(
                'map' => array('home/index' => '<domain>/test'),
                'placeholders' => array('domain' => 'example.com'),
                'url' => 'example.com/test',
                'expectedController' => 'home/index',
            ),
            'one simple placeholder' => array(
                'map' => array('home/index' => '<domain>/test'),
                'placeholders' => array('domain' => 'example.com'),
                'url' => 'http://example.com/test',
                'controller' => 'home/index',
            ),
            'one simple placeholder 2' => array(
                'map' => array('admin/auth' => '<domain>/secret'),
                'placeholders' => array('domain' => 'example.com'),
                'url' => 'http://example.com/secret',
                'controller' => 'admin/auth',
            ),
            'two simple urls' => array(
                'map' => array(
                    'admin/auth' => '<domain>/secret',
                    'admin/backend' => '<domain>/backend'
                ),
                'placeholders' => array('domain' => 'example.com'),
                'url' => 'http://example.com/backend',
                'controller' => 'admin/backend',
            ),
            'two placeholder urls' => array(
                'map' => array(
                    'admin/auth' => '<domain>/secret/<key>',
                    'admin/backend' => '<domain>/backend/<key>'
                ),
                'placeholders' => array(
                    'domain' => 'example.com',
                    'key' => 'hello'
                ),
                'url' => 'http://example.com/secret/hello',
                'controller' => 'admin/auth',
            ),
        );
    }

    /**
     * @covers Emmetog\Router\Router::map
     * @covers Emmetog\Router\Router::match
     * 
     * @dataProvider placeholderUrlsProvider
     */
    public function testPlaceholderUrlsMapAndMatch($map, $placeholders, $url, $expectedController)
    {
        // First we set up the Router with the maps.
        $this->object->setMap($map);
        $this->object->setPlaceholders($placeholders);

        // Now check if the match() method works.
        $result = $this->object->match($url);

        $this->assertInstanceOf('\Emmetog\Router\Route', $result);

        $this->assertEquals($expectedController, $result->getController());
    }

    /**
     * @covers Emmetog\Router\Router::map
     * @covers Emmetog\Router\Router::match
     * 
     * @dataProvider placeholderUrlsProvider
     */
    public function testGeneratingSimpleUrls($map, $placeholders, $url, $controller)
    {
        // First we set up the Router with the maps and placeholders.
        $this->object->setMap($map);
        $this->object->setPlaceholders($placeholders);

        // Now try generating a url.
        $result = $this->object->generate($controller);

        $this->assertEquals($url, $result);
    }
    
    public function urlsWithVariablesProvider()
    {
        return array(
            'one variable' => array(
                'map' => array('home/index' => '<domain>/test/<page:[0-9]>'),
                'placeholders' => array('domain' => 'example.com'),
                'url' => 'http://example.com/test/5',
                'controller' => 'home/index',
                'params' => array('page' => 5),
            ),
            'two variables' => array(
                'map' => array('home/index' => '<domain>/test/<page:[0-9]+>/<title:[a-zA-Z0-9\-]+>'),
                'placeholders' => array('domain' => 'example.com'),
                'url' => 'http://example.com/test/57/This-Is-The-Title',
                'controller' => 'home/index',
                'params' => array(
                    'title' => 'This-Is-The-Title',
                    'page' => 57,
                ),
            ),
        );
    }
    
    /**
     * @covers Emmetog\Router\Router::map
     * @covers Emmetog\Router\Router::match
     * 
     * @dataProvider urlsWithVariablesProvider
     */
    public function testMapAndMatchUrlsWithVariables($map, $placeholders, $url, $controller, $params)
    {
        // First we set up the Router with the maps and placeholders.
        $this->object->setMap($map);
        $this->object->setPlaceholders($placeholders);

        // Now try generating a url.
        $result = $this->object->match($url);

        $this->assertInstanceOf('\Emmetog\Router\Route', $result);

        $this->assertEquals($controller, $result->getController());
        $this->assertEquals($params, $result->getParams());
    }

    /**
     * @covers Emmetog\Router\Router::map
     * @covers Emmetog\Router\Router::match
     * 
     * @dataProvider urlsWithVariablesProvider
     */
    public function testGeneratingUrlsWithVariables($map, $placeholders, $url, $controller, $params)
    {
        // First we set up the Router with the maps and placeholders.
        $this->object->setMap($map);
        $this->object->setPlaceholders($placeholders);

        // Now try generating a url.
        $result = $this->object->generate($controller, $params);

        $this->assertEquals($url, $result);
    }
}
